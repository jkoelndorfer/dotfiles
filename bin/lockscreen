#!/bin/zsh

source "$DOTFILE_DIR/colors/solarized"
declare -a wallpaper_args
if [[ -n "$WALLPAPER_BLURRED" ]]; then
    wallpaper_args=('-i' "$WALLPAPER_BLURRED")
else
    wallpaper_args=()
fi
pkill i3lock

spotifyctl=(playerctl -p spotify)
original_spotify_status=$($spotifyctl status)
# Sending SIGUSR1 to dunst will prevent it from displaying notifications.
# SIGUSR2 resumes notifications again.
#
# Suspending notifications is handy when the screen is locked!
pkill -SIGUSR1 dunst

# Set up a background job which will turn off the screen after a while.
# The current AMDGPU code seems to have a bug where sleeping monitors
# aren't always recovered correctly (the monitors turn on and seem to
# be part of the X screen, but don't display anything).
{
    if [[ "$SCREENSAVER_STRATEGY" == 'system-suspend' ]]; then
        xset -dpms
        sleep 300
        sudo systemctl suspend
    elif [[ "$SCREENSAVER_STRATEGY" == 'screen-off' ]]; then
        xset +dpms
        xset s on
        sleep 30
        xset dpms force off
    else
        xset +dpms
        xset dpms 0 0 0
        xset s noblank
        xset s on
    fi
} &

lock_time=$(date '+%s')
if [[ "$original_spotify_status" == 'Playing' ]]; then
    $spotifyctl pause
fi
i3lock -c '#000000'
unlock_time=$(date '+%s')
if [[ "$original_spotify_status" == 'Playing' && "$((unlock_time - lock_time))" -lt "$SCREENLOCK_MUSIC_RESUME_TIME_SECONDS" ]]; then
    $spotifyctl play
fi
pkill -SIGUSR2 dunst

# Kill the backgrounded job responsible for turning off the screen.
# If the screen hasn't shut off yet but the session has been unlocked,
# the screen could flash off if the background job were allowed to
# run.
kill %1
