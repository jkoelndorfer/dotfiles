#!/bin/bash

# This script launches an alternate X server on my more
# powerful GPU for gaming.
#
# You likely need to create an /etc/X11/Xwrapper.config file
# and set `allowed_users = anybody` before this will work.

# Xorg configuration that runs the X server on the desired
# GPU for gaming.
gaming_xorg_conf="$DOTFILE_DIR/gaming/xorg.$(hostname -s).gaming.conf"

if sudo rmmod vfio_pci 2>&1 | grep -q 'in use'; then
    echo 'Failed to remove vfio_pci module, is the GPU in use?'
    exit 1
fi

# It seems that Nvidia has some issues firing up an X server if we don't always
# reset before using it. I discovered that when I was unable to launch my X11
# gaming server after booting, but VFIO seemed to work fine. Then, to my surprise,
# X11 also worked fine after the VFIO virtual machine had booted.
if sudo rmmod nvidia_drm nvidia_modeset nvidia 2>&1 | grep -q 'in use'; then
    echo 'Failed to remove the nvidia module, is the GPU in use?' >&2
    exit 1
fi
sudo bash /dev/stdin "$HIGH_END_GPU_PCI_ADDRESS" "$HIGH_END_GPU_AUDIO_PCI_ADDRESS" <<'EOF'
    gpu_device="$1"
    gpu_audio_device="$2"

    echo 1 > /sys/bus/pci/devices/$gpu_device/remove
    echo 1 > /sys/bus/pci/devices/$gpu_audio_device/remove
    while [[ -d /sys/bus/pci/devices/$gpu_device ]]; do
        sleep 0.1
    done
    echo 1 > /sys/bus/pci/rescan
    while ! [[ -d /sys/bus/pci/devices/$gpu_device ]]; do
        sleep 1
    done
    echo '' > /sys/bus/pci/devices/$gpu_device/driver_override
    echo '' > /sys/bus/pci/devices/$gpu_audio_device/driver_override
    modprobe nvidia
    modprobe nvidia_modeset
    modprobe nvidia_drm
EOF

# FIXME: Wait for the nvidia driver to initialize.
# This needs further investigation, as I'm not 100% sure this is what is happening.
#
# Based on output from dmesg, I think it takes about a 1/4 second for the nvidia driver
# to initialize fully. That's not sufficient time before X starts, which sometimes leaves
# us with a busted X server. We can leave a little extra time here just in case things
# get hairy.
#
# TODO: Is there a better way to do this? Can we detect when the driver has been fully
# initialized aside from reading dmesg logs? That's gross.
sleep 2

cd "$(dirname "$0")"
./single-monitor
sudo cp -f "$gaming_xorg_conf" /etc/X11/gaming.conf
sudo chown root:root /etc/X11/gaming.conf
sudo chmod 444 /etc/X11/gaming.conf
synergys --debug DEBUG --log /dev/stderr --config "$DOTFILE_DIR/gaming/synergy.$(hostname -s).conf" --no-daemon &
synergys_pid="$!"
xinit ./xorg-gaming-session -- "$GAMING_DISPLAY" -config 'gaming.conf' -sharevts
kill "$synergys_pid"
./xorg-input-devices-on "$PRIMARY_DISPLAY"
./dual-monitor
