#!/bin/bash

source "$(dirname "$0")/common.sh"

function cleanup() {
    if [[ -n "$NEOVIM_RESTART_FLAG" ]]; then
        rm -f "$NEOVIM_RESTART_FLAG"
    fi
}

trap cleanup EXIT

PROJECT_ROOT=$(git root 2>/dev/null)
if [[ -n "$PROJECT_ROOT" ]]; then
    export PROJECT_ROOT
fi

# If we're situated in a Python project, ensure that PYTHONPATH
# includes the current project directory. This helps the language
# server find code for autocompletion.
is_python=0
declare -a cmd=()
if [[ -d "$PROJECT_ROOT/.venv" ]]; then
    is_python=1
    source "$PROJECT_ROOT/.venv/bin/activate"
elif [[ -f "$PROJECT_ROOT/pyproject.toml" ]]; then
    is_python=1
    cmd=(poetry run)
elif [[ -f "$PROJECT_ROOT/Pipfile" ]]; then
    is_python=1
    cmd=(pipenv run)
fi

if [[ "$is_python" == '1' ]]; then
    addl_python_path="$PROJECT_ROOT:$PROJECT_ROOT/test:$PROJECT_ROOT/tests"
    if [[ -n "$PYTHONPATH" ]]; then
        PYTHONPATH="$addl_python_path:$PYTHONPATH"
    else
        PYTHONPATH="$addl_python_path"
    fi
    export PYTHONPATH
fi

NEOVIM_RESTART_FLAG=$(mktemp -t 'neovim-restart.XXXXXX')
export NEOVIM_RESTART_FLAG
if [[ "$TMUX_PROJECT_TAB" == '1' ]]; then
    echo '1' > "$NEOVIM_RESTART_FLAG"
else
    echo '0' > "$NEOVIM_RESTART_FLAG"
fi

next_nvim=$(nonshprofile_cmd 'nvim')
"${cmd[@]}" "$next_nvim" "$@"

restart_neovim=$(< "$NEOVIM_RESTART_FLAG")
if [[ "$restart_neovim" == '1' ]]; then
    # The trap won't catch this if we exec, apparently.
    rm -f "$NEOVIM_RESTART_FLAG"

    unset PROJECT_ROOT
    unset PYTHONPATH
    unset NEOVIM_RESTART_FLAG

    exec "$0" "$@"
fi
