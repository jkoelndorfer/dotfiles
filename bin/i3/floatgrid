#!/bin/bash

# This script makes i3 windows float but aligns them to a grid.
# Useful for having a window laying over the top of another while
# still taking advantage of tiling features.

# top, middle/center, or bottom
cell_position_y="$1"

# left, middle/center, or right
cell_position_x="$2"

window_width="$3"
window_height="$4"

window_id="$5"

script_dir=$(dirname "$0")
gaps_outer=$(xrdb -query | awk '$1 == "i3wm.gaps_outer:" { print $2 }')
gaps_inner=$(xrdb -query | awk '$1 == "i3wm.gaps_inner:" { print $2 }')
x11_dpi=$(xrdb -query | awk '$1 == "Xft.dpi:" { print $2 }')
gaps_scale_factor=$(( x11_dpi / 96 ))
margin_size=$(( (gaps_outer * gaps_scale_factor) + (gaps_inner * gaps_scale_factor) ))

function x_pos() {
    local cell_pos="$1"
    local width="$2"

    if [[ "$cell_pos" == 'left' ]]; then
        echo "$(( $active_workspace_x + $margin_size ))"
    elif [[ "$cell_pos" == 'middle' || "$cell_pos" == 'center' ]]; then
        echo "$(( ($active_workspace_x  + $active_workspace_width / 2) - ($width / 2) ))"
    elif [[ "$cell_pos" == 'right' ]]; then
        echo "$(( $active_workspace_x + $active_workspace_width - $width - $margin_size ))"
    fi
}

function y_pos() {
    local cell_pos="$1"
    local height="$2"

    if [[ "$cell_pos" == 'top' ]]; then
        echo "$(( $active_workspace_y + $margin_size ))"
    elif [[ "$cell_pos" == 'middle' || "$cell_pos" == 'center' ]]; then
        echo "$(( ($active_workspace_y  + $active_workspace_height / 2) - ($height / 2) ))"
    elif [[ "$cell_pos" == 'bottom' ]]; then
        echo "$(( $active_workspace_y + $active_workspace_height - $height - $margin_size ))"
    fi
}

active_workspace="$(i3-msg -t get_workspaces | jq -r '.[] | select(.focused == true)')"

active_workspace_x="$(echo "$active_workspace" | jq -r '.rect.x')"
active_workspace_y="$(echo "$active_workspace" | jq -r '.rect.y')"
active_workspace_width="$(echo "$active_workspace" | jq -r '.rect.width')"
active_workspace_height="$(echo "$active_workspace" | jq -r '.rect.height')"

if [[ -z "$window_id" ]]; then
    window_id=$("$script_dir/focusedwin" | jq -r '.id')
fi
winfo=$("$script_dir/winfo" "$window_id")
[[ -z "$window_width" ]] && window_width="$(echo "$winfo" | jq -r '.window_rect.width')"
[[ -z "$window_height" ]] && window_height="$(echo "$winfo" | jq -r '.window_rect.height')"

win_x=$(x_pos "$cell_position_x" "$window_width")
win_y=$(y_pos "$cell_position_y" "$window_height")
# FIXME: Some applications enforce a minimum size for their windows.
# This positioning logic does _not_ work for windows that do not resize exactly as they are told.
i3-msg "[con_id=\"$window_id\"]" resize set width "$window_width" height "$window_height"
i3-msg "[con_id=\"$window_id\"]" floating enable \; "[con_id=\"$window_id\"]" fullscreen disable \; "[con_id=\"$window_id\"]" move position "$win_x" "$win_y" \; "[con_id=\"$window_id\"]" focus
