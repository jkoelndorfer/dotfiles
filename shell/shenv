export DOTFILE_DIR="$HOME/.dotfiles"
export SH_LIB_DIR="$DOTFILE_DIR/shell/lib"

if [[ -n "$BASH_VERSION" ]]; then
  SHELL_NAME='bash'
elif [[ -n "$ZSH_VERSION" ]]; then
  SHELL_NAME='zsh'
else
  printf 'cannot determine current shell\n' >&2
  printf 'shell initialization cannot continue\n' >&2
  return 1
fi

# Force symbolic link resolution for $HOME.
#
# Fedora Kinoite symlinks /home to /var/home. It's reasonable to do
# and works in most cases but there are some minor problems that
# arise from doing it [1] so we band-aid those here as best we can. [2]
#
# [1]: Most notably, dotbot incorrectly calculates symbolic link
# targets when it performs dotfile installation. This causes
# the ./install script to break things when run in the host
# context on a Fedora Kinoite system.
#
# [2]: We could (and do) also just change the user's home in
# /etc/passwd. While that is the most proper solution, it is also
# system-level configuration outside the scope of this repository
# that must be remembered. This approach fixes dotbot installation,
# at least, which is the primary concern.
export HOME=$(realpath "$HOME")

# Don't source system-wide rc files.
#
# My dotfiles do a lot, and these sometimes just screw things up.
#
# I'd rather integrate machine-specific stuff into my dotfiles
# as I need it.
#
# Unfortunately, bash does not have an equivalent option.
if [[ "$SHELL_NAME" == 'zsh' ]]; then
  unsetopt GLOBAL_RCS
fi

# By default, turn off wine debugging. It should be unset in
# contexts where debug logs are required.
export WINEDEBUG='-all'
_last_dotfile_install_path="$HOME/.cache/last-dotfile-install"

c_search_directories=("$HOME/projects" "$HOME/src")

local_env="$HOME/.shenv.local"
if [[ -f "$local_env" ]]; then
  source "$local_env"
fi

secret_env="$HOME/.shenv.secret"
if [[ -f "$secret_env" ]]; then
  source "$secret_env"
fi

# vim: ft=sh
